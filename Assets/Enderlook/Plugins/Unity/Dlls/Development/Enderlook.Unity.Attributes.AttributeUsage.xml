<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enderlook.Unity.Attributes.AttributeUsage</name>
    </assembly>
    <members>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageAccessibilityAttribute.#ctor(System.Reflection.BindingFlags)">
            <summary>
            Determines which <see cref="T:System.Reflection.BindingFlags"/> must have the decorated.
            </summary>
            <param name="bindingFlags">Necessary binding flags.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageAccessibilityAttribute.CheckAllowance(System.Reflection.MemberInfo,System.String)">
            <summary>
            Unity Editor only.
            </summary>
            <param name="memberInfo"></param>
            <param name="attributeName"></param>
            <remarks>Only use in Unity Editor.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterNumber" -->
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterType">
            <summary>
            Determine the type of parameter. Use <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.VoidOrNone"/> to specify that it should not exist.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.checkingFlags">
            <summary>
            Additional checking rules.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.#ctor(System.Int32,System.Type[])" -->
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.CheckAllowance(System.Reflection.MethodInfo,System.String)">
            <summary>
            Unity Editor only.
            </summary>
            <param name="methodInfo"></param>
            <param name="attributeName"></param>
            <remarks>Only use in Unity Editor.</remarks>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.typeFlags">
            <summary>
            Additional checking rules.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.isBlackList" -->
        <!-- Badly formed XML comment ignored for member "F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.includeEnumerableTypes" -->
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.#ctor(System.Type[])">
            <summary>
            Each time Unity compile script, they will be analyzed to check if the attribute is being used in proper DataTypes.
            </summary>
            <param name="types">Data types allowed. Use <see cref="!:CheckingFlags.IsBlackList"/> in <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.typeFlags"/> to become it forbidden data types.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.CheckAllowance(System.Type,System.String,System.String)">
            <summary>
            Unity Editor only.
            </summary>
            <param name="toCheckType"></param>
            <param name="toCheckName"></param>
            <param name="attributeName"></param>
            <remarks>Only use in Unity Editor.</remarks>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageHelper">
            <summary>
            Only works in Unity Editor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageHelper.GetHashsetTypes(System.Type[],System.Boolean)" -->
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageHelper.GetTextTypes(System.Collections.Generic.IEnumerable{System.Type},Enderlook.Unity.Attributes.AttributeUsage.TypeCasting,System.Boolean)">
            <summary>
            Produce a <see cref="T:System.String"/> with all elements of <paramref name="types"/> and include specific text from <paramref name="checkingFlags"/>.
            </summary>
            <param name="types">Elements to include in the result.</param>
            <param name="checkingFlags">Additional phrases.</param>
            <param name="isBlackList">Whenever the result forbid instead of require the <paramref name="types"/>.</param>
            <returns>A <see cref="T:System.String"/> with all elements.</returns>
            <remarks>Only use in Unity Editor.</remarks>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageHelper.CheckContains(System.String,System.Collections.Generic.HashSet{System.Type},Enderlook.Unity.Attributes.AttributeUsage.TypeCasting,System.Boolean,System.String,System.Type,System.String,System.String)">
            <summary>
            Check if <paramref name="toCheckType"/> is in <paramref name="types"/> according to <paramref name="typeFlags"/> and <paramref name="isBlackList"/>.
            If not found, it will log an exception in Unity.
            </summary>
            <param name="attributeCheckerName">Name of the attribute checker.</param>
            <param name="types"><see cref="T:System.Type"/>s target.</param>
            <param name="typeFlags">Additional rules to between <paramref name="types"/> and <paramref name="toCheckType"/>.</param>
            <param name="isBlackList">If <see langword="true"/> <paramref name="toCheckType"/> must not be related with <paramref name="types"/>.</param>
            <param name="allowedTypes">String version of <paramref name="types"/>.</param>
            <param name="toCheckType"><see cref="T:System.Type"/> to be checked.</param>
            <param name="attributeName">Name of the current attribute which is being checked.</param>
            <param name="toCheckName">Name of what is <paramref name="toCheckType"/> or where it was taken from (e.g: <c><see cref="T:System.Reflection.FieldInfo"/>.Name</c>.</param>
            <remarks>Only use in Unity Editor.</remarks>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization">
            <summary>
            Rules that should be match by the field.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization.NotSerializableByUnity" -->
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization.SerializableByUnity">
            <summary>
            Serializable fields by Unity are allowed.
            <seealso cref="!:ReflectionHelper.CanBeSerializedByUnity(FieldInfo)"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization.EitherSerializableOrNotByUnity" -->
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode">
            <summary>
            The parameter mode.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.Common" -->
        <!-- Badly formed XML comment ignored for member "F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.In" -->
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.Out">
            <summary>
            Specifies an out parameter.
            If <see cref="!:parameterNumber"/> is 0, this will be ignored.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.Ref">
            <summary>
            Specifies a reference parameter.
            If <see cref="!:parameterNumber"/> is 0, this will be ignored.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.VoidOrNone">
            <summary>
            Specifies that this parameter should not exist.
            </summary>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting">
            <summary>
            Determine relation of types to look for.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.ExactMatch">
            <summary>
            It must check for the same exact type.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSubclassTypes">
            <summary>
            Whenever it should check if the type is a subclass of one of the listed types.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSuperclassTypes">
            <summary>
            Whenever it should check if the type is superclass of one of the listed types.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckIsAssignableTypes">
            <summary>
            Whenever it should check for assignable from type to one of the listed types.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSubclassOrAssignable">
            <summary>
            <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSubclassTypes"/> or <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckIsAssignableTypes"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckCanBeAssignedTypes">
            <summary>
            Whenever it should check if type can be assigned to one of the listed types.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSuperClassOrCanBeAssigned">
            <summary>
            <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckIsAssignableTypes"/> or <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckCanBeAssignedTypes"/>.
            </summary>
        </member>
    </members>
</doc>
